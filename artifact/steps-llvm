if [ $# -ne 1 ]
  then
    echo "No arguments supplied. Usage is ./steps bugid"
    exit 1
fi
bug_id=$1
if [ -d "$bug_id" ] 
  then
   echo "Folder with bug ID seems to exist already. Stopping here."
   exit 1
fi

sudo sbuild-update -udcar stretch-amd64-sbuild
echo ""$(date | awk '{print $4}')" - STARTING STEPS FOR BUG "$bug_id
maxtaskid=$(($(cat tasks.json | jq length)-1))
working_folder="$( cd "$(dirname "$0")" ; pwd -P )"
if ! [ -e $working_folder/tasks.json ]; then echo "error: tasks.json was not provided"; exit 1; fi
#rm -rf tasks
mkdir tasks
{
echo ""$(date | awk '{print $4}')" - STARTING STEPS FOR BUG "$bug_id
sucessful_build=0
bug_reached=0
bug_triggered=0
binaries_different=0
test_suite_aborted=0
test_suite_different=0
cp patch.txt tasks
cp -r *.c tasks
cp test.ll tasks
cp revision.txt tasks
cp -f /home/user42/cloud-scripts/compiler-patched /home/user42/cloud-scripts/modes/compiler-patched
cp -f /home/user42/cloud-scripts/compiler-patched /srv/chroot/stretch-amd64-sbuild/tmp/compiler-patched
sudo chmod +x /srv/chroot/stretch-amd64-sbuild/tmp/compiler-patched
sudo chown user42:sbuild /srv/chroot/stretch-amd64-sbuild/tmp/compiler-patched
for i in `seq 0 $maxtaskid`;
do
     #if [[ "$i" -lt 28 ]] ; then
     #  continue
     #fi
     bug_triggered_bool=1 
     cat tasks.json | jq .[$i] > task.tmp1
     PACKAGE_NAME=$(echo $(cat task.tmp1 | jq '.source') | cut -d'"' -f 2)
     LOG_FILE=$working_folder/tasks/$PACKAGE_NAME/cop-build.log
     cat task.tmp1 | jq '.logfile="'$LOG_FILE'"' > task.tmp
     rm task.tmp1
     PACKAGE_NAME=$(echo $(cat task.tmp | jq '.source') | cut -d'"' -f 2)
     echo "--> ["$(($i+1))"/"$(($maxtaskid+1))"] "$(date | awk '{print $4}')" - PROCESSING PACKAGE "$PACKAGE_NAME
     mkdir ./tasks/$PACKAGE_NAME
     echo "    STEP 1"
       echo "    .. Building package with cop compiler (output in "$LOG_FILE")"
       # Set cop compiler for use in chroot
       rm -rf /srv/chroot/stretch-amd64-sbuild/home/compiler/llvm-install
       cp -r /srv/chroot/stretch-amd64-sbuild/home/compiler/cop/llvm-install /srv/chroot/stretch-amd64-sbuild/home/compiler/
       # Build package with cop compiler
       sudo /home/user42/cloud-scripts/process-task -v -t task.tmp &> $LOG_FILE
       # Check if cop build was successfull and if so goes on with next steps
       if grep -q "DC-Status: OK" $LOG_FILE; then
         # Check if bug triggered
         if grep -q "Optimization reached!" $LOG_FILE; then
          bug_reached=$(($bug_reached + 1))
          echo "    .. package was successfully built with cop compiler AND bug was reached"
         else
          echo "    .. package was successfully built with cop compiler and bug was NOT reached"
          if grep -q "Bug Triggered!" $LOG_FILE; then
            echo "    .. failure: bug was detected as triggered but not reached, which is inconsistent"
            rm task.tmp
            break
          fi
          bug_triggered_bool=0
         fi
         if grep -q "Bug Triggered!" $LOG_FILE; then
          bug_triggered=$(($bug_triggered + 1))
          echo "    .. bug also triggered"
         else
          echo "    .. bug did NOT trigger"
          bug_triggered_bool=0
         fi
       else
         # Check if bug triggered
         if grep -q "Bug Triggered!" $LOG_FILE; then
          echo "    .. error: package build with cop compiler failed (BUT bug triggered)"
         else
          echo "    .. error: package build with cop compiler failed (and bug did not trigger)"
         fi
         rm task.tmp
         continue
       fi
     echo "    STEP 2"
       LOG_FILE_BUGGY=$working_folder/tasks/$PACKAGE_NAME/buggy-build.log.tmp
       echo "    .. Building package with buggy compiler (output in "$LOG_FILE_BUGGY")"
       # Set buggy compiler for use in chroot
       rm -rf /srv/chroot/stretch-amd64-sbuild/home/compiler/llvm-install
       cp -r /srv/chroot/stretch-amd64-sbuild/home/compiler/buggy/llvm-install /srv/chroot/stretch-amd64-sbuild/home/compiler/
       # Build package with buggy compiler
       cat task.tmp | jq '.logfile="'$LOG_FILE_BUGGY'"' > task.tmp1
       mv -f task.tmp1 task.tmp
       rm -rf /home/user42/cloud-scripts/results/*
       sudo /home/user42/cloud-scripts/process-task-keep -v -t task.tmp &> $LOG_FILE_BUGGY
       # Check if buggy build was successfull and if so goes on with next steps
       if grep -q "DC-Status: OK" $LOG_FILE_BUGGY; then
         echo "    .. package was successfully built with buggy compiler"
       else
         echo "    .. error: package build with buggy compiler failed"
         rm task.tmp
         continue
       fi
       # Save source and built package
       mv /home/user42/cloud-scripts/results/$(ls /home/user42/cloud-scripts/results | head -1) $working_folder/tasks/$PACKAGE_NAME/buggy-packages
       LOG_FILE_FIXED=$working_folder/tasks/$PACKAGE_NAME/fixed-build.log.tmp
       echo "    .. Building package with fixed compiler (output in "$LOG_FILE_FIXED")"
       # Set fixed compiler for use in chroot
       rm -rf /srv/chroot/stretch-amd64-sbuild/home/compiler/llvm-install
       cp -r /srv/chroot/stretch-amd64-sbuild/home/compiler/fixed/llvm-install /srv/chroot/stretch-amd64-sbuild/home/compiler/
       # Build package with fixed compiler
       cat task.tmp | jq '.logfile="'$LOG_FILE_FIXED'"' > task.tmp1
       mv -f task.tmp1 task.tmp
       rm -rf /home/user42/cloud-scripts/results/*
       sudo /home/user42/cloud-scripts/process-task-keep -v -t task.tmp &> $LOG_FILE_FIXED
       # Check if fixed build was successfull and if so goes on with next steps
       if grep -q "DC-Status: OK" $LOG_FILE_FIXED; then
         echo "    .. package was successfully built with fixed compiler"
       else
         echo "    .. error: package build with fixed compiler failed"
         rm task.tmp
         continue
       fi
       # Save source and built package
       mv /home/user42/cloud-scripts/results/$(ls /home/user42/cloud-scripts/results | head -1) $working_folder/tasks/$PACKAGE_NAME/fixed-packages 
       echo "    .. Comparing the binaries produced by the buggy and fixed compiler"
       # Unpack binary packages (there can be several .deb binary paxkage produced for one .dsc source package, unpacking only the root one)
       cd $working_folder/tasks/$PACKAGE_NAME/buggy-packages
       filename=$(ls *.dsc); deb_file="${filename%.*}_amd64.deb"
       mkdir ../buggy-binaries
       for f in *.deb; do 
           dpkg -x $f ../buggy-binaries/${f%.*}
       done
       cd $working_folder/tasks/$PACKAGE_NAME/fixed-packages
       mkdir ../fixed-binaries
       for f in *.deb; do
           dpkg -x $f ../fixed-binaries/${f%.*}
       done
       cd $working_folder
       # Compare unpacked binaries and report if similar or not
       DIFF_FILE_BINARIES=$working_folder/tasks/$PACKAGE_NAME/binaries-diff.txt
       diff -r --no-dereference $working_folder/tasks/$PACKAGE_NAME/buggy-binaries/ $working_folder/tasks/$PACKAGE_NAME/fixed-binaries/ &> $DIFF_FILE_BINARIES
       rm -rf $working_folder/tasks/$PACKAGE_NAME/buggy-binaries/
       rm -rf $working_folder/tasks/$PACKAGE_NAME/fixed-binaries/
       if [[ -s $DIFF_FILE_BINARIES ]]; then 
         binaries_different=$(($binaries_different+1))
         echo "    .. the binaries seem different (please check details in "$DIFF_FILE_BINARIES")"
         if [ $bug_triggered_bool -eq 0 ]; then
             echo "    .. failure: bug did not trigger but the binaries are different, which is inconsistent, INVESTIGATE!"
         fi  
       else 
         echo "    .. the binaries are the same"
         rm -rf $working_folder/tasks/$PACKAGE_NAME/buggy-packages/
         rm -rf $working_folder/tasks/$PACKAGE_NAME/fixed-packages/
         sucessful_build=$(($sucessful_build+1))
         rm task.tmp
         continue
       fi
     echo "    STEP 3"
       sucessful_build=$(($sucessful_build+1))
       echo "    .. Running test suites with the buggy and fixed binaries and comparing results"
       if grep -q "Testsuite" $working_folder/tasks/$PACKAGE_NAME/buggy-packages/$filename; then
         echo "    .. the corresponding source package contains a valid test suite"
       else
         echo "    .. the corresponding source package does NOT contain a valid test suite"
         test_suite_aborted=$(($test_suite_aborted+1))
         rm task.tmp
         continue
       fi
       DIFF_FILE_TESTS=$working_folder/tasks/$PACKAGE_NAME/test-diff.txt
       # Executing the test suites
       sudo sbuild-update -udcar stretch-amd64-sbuild
       autopkgtest -B --summary=$working_folder/tasks/$PACKAGE_NAME/tests-buggy.summary  $working_folder/tasks/$PACKAGE_NAME/buggy-packages/*.deb $working_folder/tasks/$PACKAGE_NAME/buggy-packages/*.dsc -U -- schroot stretch-amd64-sbuild &> $working_folder/tasks/$PACKAGE_NAME/test-buggy.txt
       autopkgtest -B --summary=$working_folder/tasks/$PACKAGE_NAME/tests-fixed.summary  $working_folder/tasks/$PACKAGE_NAME/fixed-packages/*.deb $working_folder/tasks/$PACKAGE_NAME/fixed-packages/*.dsc -U -- schroot stretch-amd64-sbuild &> $working_folder/tasks/$PACKAGE_NAME/test-fixed.txt
       # Compare test suite runs and report if similar or not
       diff $working_folder/tasks/$PACKAGE_NAME/tests-buggy.summary $working_folder/tasks/$PACKAGE_NAME/tests-fixed.summary &> $DIFF_FILE_TESTS
       if ! grep -q -e "PASS" $working_folder/tasks/$PACKAGE_NAME/tests-buggy.summary || ! grep -q -e "PASS" $working_folder/tasks/$PACKAGE_NAME/tests-fixed.summary; then
          echo "    .. warning: no test was run successfully for at least one binary, please investigate manually"
          test_suite_aborted=$(($test_suite_aborted+1))
          rm task.tmp
          continue
       fi
       rm $working_folder/tasks/$PACKAGE_NAME/tests-fixed.summary $working_folder/tasks/$PACKAGE_NAME/tests-buggy.summary
       if [[ -s $DIFF_FILE_TESTS ]]; then 
         test_suite_different=$(($test_suite_different+1))
         echo "    .. the test suite runs seem to produce different outputs (please check details in "$DIFF_FILE_TESTS")"
       else 
         echo "    .. no difference between the test suite runs"
       fi
    rm task.tmp;
done
echo $bug_id" - "$(($maxtaskid+1)) $sucessful_build $bug_reached $bug_triggered $binaries_different $test_suite_aborted $test_suite_different""
echo ""$(date | awk '{print $4}')" - STEPS FOR BUG "$bug_id" DONE";
} > tasks/results.txt 
echo ""$(date | awk '{print $4}')" - STEPS FOR BUG "$bug_id" DONE";

